Index: talk/media/webrtc/webrtcvideocapturer.cc
===================================================================
--- talk/media/webrtc/webrtcvideocapturer.cc	(revision 6937)
+++ talk/media/webrtc/webrtcvideocapturer.cc	(working copy)
@@ -199,7 +199,7 @@
 #if !defined(IOS)
   if (supported.empty()) {
     LOG(LS_ERROR) << "Failed to find usable formats for id: " << device.id;
-    return false;
+//    return false;
   }
 #endif
   module_ = factory_->Create(0, vcm_id);
Index: webrtc/modules/video_capture/ios/rtc_video_capture_ios_objc.h
===================================================================
--- webrtc/modules/video_capture/ios/rtc_video_capture_ios_objc.h	(revision 6937)
+++ webrtc/modules/video_capture/ios/rtc_video_capture_ios_objc.h	(working copy)
@@ -12,7 +12,7 @@
 #define WEBRTC_MODULES_VIDEO_CAPTURE_IOS_VIDEO_CAPTURE_IOS_OBJC_H_
 
 #import <Foundation/Foundation.h>
-#import <UIKit/UIKit.h>
+#import <cocoa/cocoa.h>
 
 #include "webrtc/modules/video_capture/ios/video_capture_ios.h"
 
Index: webrtc/modules/video_capture/mac/video_capture_mac.mm
===================================================================
--- webrtc/modules/video_capture/mac/video_capture_mac.mm	(revision 6937)
+++ webrtc/modules/video_capture/mac/video_capture_mac.mm	(working copy)
@@ -1,5 +1,5 @@
 /*
- *  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.
+ *  Copyright (c) 2013 The WebRTC project authors. All Rights Reserved.
  *
  *  Use of this source code is governed by a BSD-style license
  *  that can be found in the LICENSE file in the root of the source
@@ -8,264 +8,95 @@
  *  be found in the AUTHORS file in the root of the source tree.
  */
 
-/*
- *  video_capture_mac.cc
- *
- */
+#if !defined(__has_feature) || !__has_feature(objc_arc)
+#error "This file requires ARC support."
+#endif
 
-#include <QuickTime/QuickTime.h>
-
-#include "webrtc/modules/video_capture/device_info_impl.h"
-#include "webrtc/modules/video_capture/video_capture_config.h"
-#include "webrtc/modules/video_capture/video_capture_impl.h"
+#include "webrtc/modules/video_capture/ios/device_info_ios_objc.h"
+#include "webrtc/modules/video_capture/ios/rtc_video_capture_ios_objc.h"
 #include "webrtc/system_wrappers/interface/ref_count.h"
+#include "webrtc/system_wrappers/interface/scoped_refptr.h"
 #include "webrtc/system_wrappers/interface/trace.h"
 
-// 10.4 support must be decided runtime. We will just decide which framework to
-// use at compile time "work" classes. One for QTKit, one for QuickTime
-#if __MAC_OS_X_VERSION_MIN_REQUIRED == __MAC_10_4 // QuickTime version
-#include <QuickTime/video_capture_quick_time.h>
-#include <QuickTime/video_capture_quick_time_info.h>
-#else
-#include "webrtc/modules/video_capture/mac/qtkit/video_capture_qtkit.h"
-#include "webrtc/modules/video_capture/mac/qtkit/video_capture_qtkit_info.h"
-#endif
+using namespace webrtc;
+using namespace videocapturemodule;
 
-namespace webrtc
-{
-namespace videocapturemodule
-{
+VideoCaptureModule* VideoCaptureImpl::Create(const int32_t capture_id,
+                                             const char* deviceUniqueIdUTF8) {
+  return VideoCaptureIos::Create(capture_id, deviceUniqueIdUTF8);
+}
 
-// static
-bool CheckOSVersion()
-{
-    // Check OSX version
-    OSErr err = noErr;
-
-    SInt32 version;
-
-    err = Gestalt(gestaltSystemVersion, &version);
-    if (err != noErr)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, 0,
-                     "Could not get OS version");
-        return false;
-    }
-
-    if (version < 0x00001040) // Older version than Mac OSX 10.4
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, 0,
-                     "OS version too old: 0x%x", version);
-        return false;
-    }
-
-    WEBRTC_TRACE(webrtc::kTraceDebug, webrtc::kTraceVideoCapture, 0,
-                 "OS version compatible: 0x%x", version);
-
-    return true;
+VideoCaptureIos::VideoCaptureIos(const int32_t capture_id)
+    : VideoCaptureImpl(capture_id), is_capturing_(false), id_(capture_id) {
+  capability_.width = kDefaultWidth;
+  capability_.height = kDefaultHeight;
+  capability_.maxFPS = kDefaultFrameRate;
 }
 
-// static
-bool CheckQTVersion()
-{
-    // Check OSX version
-    OSErr err = noErr;
-
-    SInt32 version;
-
-    err = Gestalt(gestaltQuickTime, &version);
-    if (err != noErr)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, 0,
-                     "Could not get QuickTime version");
-        return false;
-    }
-
-    if (version < 0x07000000) // QT v. 7.x or newer (QT 5.0.2 0x05020000)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, 0,
-                     "QuickTime version too old: 0x%x", version);
-        return false;
-    }
-
-    WEBRTC_TRACE(webrtc::kTraceDebug, webrtc::kTraceVideoCapture, 0,
-                 "QuickTime version compatible: 0x%x", version);
-    return true;
+VideoCaptureIos::~VideoCaptureIos() {
+  if (is_capturing_) {
+    [capture_device_ stopCapture];
+  }
 }
 
-/**************************************************************************
- *
- *    Create/Destroy a VideoCaptureModule
- *
- ***************************************************************************/
+VideoCaptureModule* VideoCaptureIos::Create(const int32_t capture_id,
+                                            const char* deviceUniqueIdUTF8) {
+  if (!deviceUniqueIdUTF8[0]) {
+    return NULL;
+  }
 
-/*
- *   Returns version of the module and its components
- *
- *   version                 - buffer to which the version will be written
- *   remainingBufferInBytes  - remaining number of int8_t in the version
- *                             buffer
- *   position                - position of the next empty int8_t in the
- *                             version buffer
- */
+  RefCountImpl<VideoCaptureIos>* capture_module =
+      new RefCountImpl<VideoCaptureIos>(capture_id);
 
-VideoCaptureModule* VideoCaptureImpl::Create(
-    const int32_t id, const char* deviceUniqueIdUTF8)
-{
+  const int32_t name_length = strlen(deviceUniqueIdUTF8);
+  if (name_length > kVideoCaptureUniqueNameLength)
+    return NULL;
 
-    if (webrtc::videocapturemodule::CheckOSVersion() == false)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, id,
-                     "OS version is too old. Could not create video capture "
-                     "module. Returning NULL");
-        return NULL;
-    }
+  capture_module->_deviceUniqueId = new char[name_length + 1];
+  strncpy(capture_module->_deviceUniqueId, deviceUniqueIdUTF8, name_length + 1);
+  capture_module->_deviceUniqueId[name_length] = '\0';
 
-#if __MAC_OS_X_VERSION_MIN_REQUIRED == __MAC_10_4 // QuickTime version
-    if (webrtc::videocapturemodule::CheckQTVersion() == false)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, id,
-                     "QuickTime version is too old. Could not create video "
-                     "capture module. Returning NULL");
-        return NULL;
-    }
+  capture_module->capture_device_ =
+      [[RTCVideoCaptureIosObjC alloc] initWithOwner:capture_module
+                                          captureId:capture_module->id_];
+  if (!capture_module->capture_device_) {
+    return NULL;
+  }
 
-    WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                 "%s line %d. QTKit is not supported on this machine. Using "
-                 "QuickTime framework to capture video",
-                 __FILE__, __LINE__);
+  if (![capture_module->capture_device_ setCaptureDeviceByUniqueId:[
+              [NSString alloc] initWithCString:deviceUniqueIdUTF8
+                                      encoding:NSUTF8StringEncoding]]) {
+    return NULL;
+  }
+  return capture_module;
+}
 
-    RefCountImpl<videocapturemodule::VideoCaptureMacQuickTime>*
-        newCaptureModule =
-            new RefCountImpl<videocapturemodule::VideoCaptureMacQuickTime>(id);
+int32_t VideoCaptureIos::StartCapture(
+    const VideoCaptureCapability& capability) {
+  capability_ = capability;
 
-    if (!newCaptureModule)
-    {
-        WEBRTC_TRACE(webrtc::kTraceDebug, webrtc::kTraceVideoCapture, id,
-                     "could not Create for unique device %s, !newCaptureModule",
-                     deviceUniqueIdUTF8);
-        return NULL;
-    }
+  if (![capture_device_ startCaptureWithCapability:capability]) {
+    return -1;
+  }
 
-    if (newCaptureModule->Init(id, deviceUniqueIdUTF8) != 0)
-    {
-        WEBRTC_TRACE(webrtc::kTraceDebug, webrtc::kTraceVideoCapture, id,
-                     "could not Create for unique device %s, "
-                     "newCaptureModule->Init()!=0",
-                     deviceUniqueIdUTF8);
-        delete newCaptureModule;
-        return NULL;
-    }
+  is_capturing_ = true;
 
-    // Successfully created VideoCaptureMacQuicktime. Return it
-    WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                 "Module created for unique device %s. Will use QuickTime "
-                 "framework to capture",
-                 deviceUniqueIdUTF8);
-    return newCaptureModule;
+  return 0;
+}
 
-#else // QTKit version
+int32_t VideoCaptureIos::StopCapture() {
+  if (![capture_device_ stopCapture]) {
+    return -1;
+  }
 
-    WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                 "Using QTKit framework to capture video", id);
-
-    RefCountImpl<videocapturemodule::VideoCaptureMacQTKit>* newCaptureModule =
-        new RefCountImpl<videocapturemodule::VideoCaptureMacQTKit>(id);
-
-    if(!newCaptureModule)
-    {
-        WEBRTC_TRACE(webrtc::kTraceDebug, webrtc::kTraceVideoCapture, id,
-                     "could not Create for unique device %s, !newCaptureModule",
-                     deviceUniqueIdUTF8);
-        return NULL;
-    }
-    if(newCaptureModule->Init(id, deviceUniqueIdUTF8) != 0)
-    {
-        WEBRTC_TRACE(webrtc::kTraceDebug, webrtc::kTraceVideoCapture, id,
-                     "could not Create for unique device %s, "
-                     "newCaptureModule->Init()!=0", deviceUniqueIdUTF8);
-        delete newCaptureModule;
-        return NULL;
-    }
-
-    // Successfully created VideoCaptureMacQuicktime. Return it
-    WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                 "Module created for unique device %s, will use QTKit "
-                 "framework",deviceUniqueIdUTF8);
-    return newCaptureModule;
-#endif
+  is_capturing_ = false;
+  return 0;
 }
 
-/**************************************************************************
- *
- *    Create/Destroy a DeviceInfo
- *
- ***************************************************************************/
+bool VideoCaptureIos::CaptureStarted() { return is_capturing_; }
 
-VideoCaptureModule::DeviceInfo*
-VideoCaptureImpl::CreateDeviceInfo(const int32_t id)
-{
-
-
-    if (webrtc::videocapturemodule::CheckOSVersion() == false)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, id,
-                     "OS version is too old. Could not create video capture "
-                     "module. Returning NULL");
-        return NULL;
-    }
-
-#if __MAC_OS_X_VERSION_MIN_REQUIRED == __MAC_10_4 // QuickTime version
-    if (webrtc::videocapturemodule::CheckQTVersion() == false)
-    {
-        WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, id,
-                     "QuickTime version is too old. Could not create video "
-                     "capture module. Returning NULL");
-        return NULL;
-    }
-
-    webrtc::videocapturemodule::VideoCaptureMacQuickTimeInfo* newCaptureInfoModule =
-        new webrtc::videocapturemodule::VideoCaptureMacQuickTimeInfo(id);
-
-    if (!newCaptureInfoModule || newCaptureInfoModule->Init() != 0)
-    {
-        Destroy(newCaptureInfoModule);
-        newCaptureInfoModule = NULL;
-        WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                     "Failed to Init newCaptureInfoModule created with id %d "
-                     "and device \"\" ", id);
-        return NULL;
-    }
-    WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                 "VideoCaptureModule created for id", id);
-    return newCaptureInfoModule;
-
-#else // QTKit version
-    webrtc::videocapturemodule::VideoCaptureMacQTKitInfo* newCaptureInfoModule =
-        new webrtc::videocapturemodule::VideoCaptureMacQTKitInfo(id);
-
-    if(!newCaptureInfoModule || newCaptureInfoModule->Init() != 0)
-    {
-        //Destroy(newCaptureInfoModule);
-        delete newCaptureInfoModule;
-        newCaptureInfoModule = NULL;
-        WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                     "Failed to Init newCaptureInfoModule created with id %d "
-                     "and device \"\" ", id);
-        return NULL;
-    }
-    WEBRTC_TRACE(webrtc::kTraceInfo, webrtc::kTraceVideoCapture, id,
-                 "VideoCaptureModule created for id", id);
-    return newCaptureInfoModule;
-
-#endif
-
+int32_t VideoCaptureIos::CaptureSettings(VideoCaptureCapability& settings) {
+  settings = capability_;
+  settings.rawType = kVideoNV12;
+  return 0;
 }
-
-/**************************************************************************
- *
- *    End Create/Destroy VideoCaptureModule
- *
- ***************************************************************************/
-}  // namespace videocapturemodule
-}  // namespace webrtc
Index: webrtc/modules/video_capture/video_capture.gypi
===================================================================
--- webrtc/modules/video_capture/video_capture.gypi	(revision 6937)
+++ webrtc/modules/video_capture/video_capture.gypi	(working copy)
@@ -44,28 +44,28 @@
                 'linux/video_capture_linux.h',
               ],
             }],  # linux
-            ['OS=="mac"', {
-              'sources': [
-                'mac/qtkit/video_capture_qtkit.h',
-                'mac/qtkit/video_capture_qtkit.mm',
-                'mac/qtkit/video_capture_qtkit_info.h',
-                'mac/qtkit/video_capture_qtkit_info.mm',
-                'mac/qtkit/video_capture_qtkit_info_objc.h',
-                'mac/qtkit/video_capture_qtkit_info_objc.mm',
-                'mac/qtkit/video_capture_qtkit_objc.h',
-                'mac/qtkit/video_capture_qtkit_objc.mm',
-                'mac/qtkit/video_capture_qtkit_utility.h',
-                'mac/video_capture_mac.mm',
-              ],
-              'link_settings': {
-                'xcode_settings': {
-                  'OTHER_LDFLAGS': [
-                    '-framework CoreVideo',
-                    '-framework QTKit',
-                  ],
-                },
-              },
-            }],  # mac
+#            ['OS=="mac"', {
+#              'sources': [
+#                'mac/qtkit/video_capture_qtkit.h',
+#                'mac/qtkit/video_capture_qtkit.mm',
+#                'mac/qtkit/video_capture_qtkit_info.h',
+#                'mac/qtkit/video_capture_qtkit_info.mm',
+#                'mac/qtkit/video_capture_qtkit_info_objc.h',
+#                'mac/qtkit/video_capture_qtkit_info_objc.mm',
+#                'mac/qtkit/video_capture_qtkit_objc.h',
+#                'mac/qtkit/video_capture_qtkit_objc.mm',
+#                'mac/qtkit/video_capture_qtkit_utility.h',
+#                'mac/video_capture_mac.mm',
+#              ],
+#              'link_settings': {
+#                'xcode_settings': {
+#                  'OTHER_LDFLAGS': [
+#                    '-framework CoreVideo',
+#                    '-framework QTKit',
+#                  ],
+#                },
+#              },
+#            }],  # mac
             ['OS=="win"', {
               'dependencies': [
                 '<(DEPTH)/third_party/winsdk_samples/winsdk_samples.gyp:directshow_baseclasses',
@@ -103,16 +103,16 @@
                 'android/video_capture_android.h',
               ],
             }],  # android
-            ['OS=="ios"', {
+            ['OS=="mac"', {
               'sources': [
-                'ios/device_info_ios.h',
-                'ios/device_info_ios.mm',
-                'ios/device_info_ios_objc.h',
-                'ios/device_info_ios_objc.mm',
-                'ios/rtc_video_capture_ios_objc.h',
-                'ios/rtc_video_capture_ios_objc.mm',
-                'ios/video_capture_ios.h',
-                'ios/video_capture_ios.mm',
+                'mac/device_info_mac.h',
+                'mac/device_info_mac.mm',
+                'mac/device_info_mac_objc.h',
+                'mac/device_info_mac_objc.mm',
+                'mac/rtc_video_capture_mac_objc.h',
+                'mac/rtc_video_capture_mac_objc.mm',
+                'mac/video_capture_mac.h',
+                'mac/video_capture_mac.mm',
               ],
               'xcode_settings': {
                 'CLANG_ENABLE_OBJC_ARC': 'YES',
@@ -128,8 +128,7 @@
                   'OTHER_LDFLAGS': [
                     '-framework AVFoundation',
                     '-framework CoreMedia',
-                    '-framework CoreVideo',
-                    '-framework UIKit',
+                    '-framework CoreVideo'
                   ],
                 },
               },
